declare const presetEntries: {
    createCjsPreset: (options?: {
        tsconfig?: import("ts-jest").TsJestTransformerOptions["tsconfig"];
        astTransformers?: import("ts-jest").TsJestTransformerOptions["astTransformers"];
        babelConfig?: import("ts-jest").TsJestTransformerOptions["babelConfig"];
        diagnostics?: import("ts-jest").TsJestTransformerOptions["diagnostics"];
        testEnvironment?: import("./utils").JSDOMEnvironment;
    }) => {
        testEnvironment: import("./utils").JSDOMEnvironment;
        moduleFileExtensions: import("jest").Config["moduleFileExtensions"];
        snapshotSerializers: import("jest").Config["snapshotSerializers"];
    } & Required<Pick<{
        filter?: string | undefined;
        rootDir?: string | undefined;
        json?: boolean | undefined;
        automock?: boolean | undefined;
        bail?: number | boolean | undefined;
        cache?: boolean | undefined;
        cacheDirectory?: string | undefined;
        ci?: boolean | undefined;
        clearMocks?: boolean | undefined;
        changedFilesWithAncestor?: boolean | undefined;
        changedSince?: string | undefined;
        collectCoverage?: boolean | undefined;
        collectCoverageFrom?: string[] | undefined;
        coverageDirectory?: string | undefined;
        coveragePathIgnorePatterns?: string[] | undefined;
        coverageProvider?: "babel" | "v8" | undefined;
        coverageReporters?: ("json" | "text" | "clover" | "cobertura" | "html-spa" | "html" | "json-summary" | "lcov" | "lcovonly" | "none" | "teamcity" | "text-lcov" | "text-summary" | ["json" | "text" | "clover" | "cobertura" | "html-spa" | "html" | "json-summary" | "lcov" | "lcovonly" | "none" | "teamcity" | "text-lcov" | "text-summary", {
            [x: string]: unknown;
        }])[] | undefined;
        coverageThreshold?: {
            [path: string]: {
                branches?: number | undefined;
                functions?: number | undefined;
                lines?: number | undefined;
                statements?: number | undefined;
            };
            global: import("@sinclair/typebox").Static<import("@sinclair/typebox").TObject<{
                branches: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TNumber>;
                functions: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TNumber>;
                lines: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TNumber>;
                statements: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TNumber>;
            }>>;
        } | undefined;
        dependencyExtractor?: string | undefined;
        detectLeaks?: boolean | undefined;
        detectOpenHandles?: boolean | undefined;
        displayName?: string | {
            name: string;
            color: "black" | "red" | "green" | "yellow" | "blue" | "magenta" | "cyan" | "white" | "gray" | "grey" | "blackBright" | "redBright" | "greenBright" | "yellowBright" | "blueBright" | "magentaBright" | "cyanBright" | "whiteBright";
        } | undefined;
        expand?: boolean | undefined;
        extensionsToTreatAsEsm?: string[] | undefined;
        fakeTimers?: ({
            enableGlobally?: boolean | undefined;
        } & ({
            advanceTimers?: number | boolean | undefined;
            doNotFake?: ("Date" | "hrtime" | "nextTick" | "performance" | "queueMicrotask" | "requestAnimationFrame" | "cancelAnimationFrame" | "requestIdleCallback" | "cancelIdleCallback" | "setImmediate" | "clearImmediate" | "setInterval" | "clearInterval" | "setTimeout" | "clearTimeout")[] | undefined;
            now?: number | undefined;
            timerLimit?: number | undefined;
            legacyFakeTimers?: false | undefined;
        } | {
            legacyFakeTimers?: true | undefined;
        })) | undefined;
        findRelatedTests?: boolean | undefined;
        forceCoverageMatch?: string[] | undefined;
        forceExit?: boolean | undefined;
        globals?: {
            [x: string]: unknown;
        } | undefined;
        globalSetup?: string | null | undefined;
        globalTeardown?: string | null | undefined;
        haste?: {
            computeSha1?: boolean | undefined;
            defaultPlatform?: string | null | undefined;
            forceNodeFilesystemAPI?: boolean | undefined;
            enableSymlinks?: boolean | undefined;
            hasteImplModulePath?: string | undefined;
            platforms?: string[] | undefined;
            throwOnModuleCollision?: boolean | undefined;
            hasteMapModulePath?: string | undefined;
            retainAllFiles?: boolean | undefined;
        } | undefined;
        id?: string | undefined;
        injectGlobals?: boolean | undefined;
        reporters?: (string | [string, {
            [x: string]: unknown;
        }])[] | undefined;
        logHeapUsage?: boolean | undefined;
        lastCommit?: boolean | undefined;
        listTests?: boolean | undefined;
        maxConcurrency?: number | undefined;
        maxWorkers?: string | number | undefined;
        moduleDirectories?: string[] | undefined;
        moduleFileExtensions?: string[] | undefined;
        moduleNameMapper?: {
            [x: string]: string | string[];
        } | undefined;
        modulePathIgnorePatterns?: string[] | undefined;
        modulePaths?: string[] | undefined;
        noStackTrace?: boolean | undefined;
        notify?: boolean | undefined;
        notifyMode?: string | undefined;
        onlyChanged?: boolean | undefined;
        onlyFailures?: boolean | undefined;
        openHandlesTimeout?: number | undefined;
        outputFile?: string | undefined;
        passWithNoTests?: boolean | undefined;
        preset?: string | null | undefined;
        prettierPath?: string | null | undefined;
        projects?: (string | {
            [x: string]: unknown;
        })[] | undefined;
        randomize?: boolean | undefined;
        replname?: string | null | undefined;
        resetMocks?: boolean | undefined;
        resetModules?: boolean | undefined;
        resolver?: string | null | undefined;
        restoreMocks?: boolean | undefined;
        roots?: string[] | undefined;
        runner?: string | undefined;
        runTestsByPath?: boolean | undefined;
        runtime?: string | undefined;
        sandboxInjectedGlobals?: string[] | undefined;
        setupFiles?: string[] | undefined;
        setupFilesAfterEnv?: string[] | undefined;
        showSeed?: boolean | undefined;
        silent?: boolean | undefined;
        skipFilter?: boolean | undefined;
        skipNodeResolution?: boolean | undefined;
        slowTestThreshold?: number | undefined;
        snapshotResolver?: string | undefined;
        snapshotSerializers?: string[] | undefined;
        snapshotFormat?: {
            callToJSON?: boolean | undefined;
            compareKeys?: null | undefined;
            escapeRegex?: boolean | undefined;
            escapeString?: boolean | undefined;
            highlight?: boolean | undefined;
            indent?: number | undefined;
            maxDepth?: number | undefined;
            maxWidth?: number | undefined;
            min?: boolean | undefined;
            printBasicPrototype?: boolean | undefined;
            printFunctionName?: boolean | undefined;
            theme?: {
                comment?: string | undefined;
                content?: string | undefined;
                prop?: string | undefined;
                tag?: string | undefined;
                value?: string | undefined;
            } | undefined;
        } | undefined;
        errorOnDeprecated?: boolean | undefined;
        testEnvironment?: string | undefined;
        testEnvironmentOptions?: {
            [x: string]: unknown;
        } | undefined;
        testFailureExitCode?: number | undefined;
        testLocationInResults?: boolean | undefined;
        testMatch?: string | string[] | undefined;
        testNamePattern?: string | undefined;
        testPathIgnorePatterns?: string[] | undefined;
        testRegex?: string | string[] | undefined;
        testResultsProcessor?: string | undefined;
        testRunner?: string | undefined;
        testSequencer?: string | undefined;
        testTimeout?: number | undefined;
        transform?: {
            [x: string]: string | [string, unknown];
        } | undefined;
        transformIgnorePatterns?: string[] | undefined;
        watchPathIgnorePatterns?: string[] | undefined;
        unmockedModulePathPatterns?: string[] | undefined;
        updateSnapshot?: boolean | undefined;
        useStderr?: boolean | undefined;
        verbose?: boolean | undefined;
        waitForUnhandledRejections?: boolean | undefined;
        watch?: boolean | undefined;
        watchAll?: boolean | undefined;
        watchman?: boolean | undefined;
        watchPlugins?: (string | [string, unknown])[] | undefined;
        workerIdleMemoryLimit?: string | number | undefined;
        workerThreads?: boolean | undefined;
    }, "transform" | "transformIgnorePatterns">>;
    createEsmPreset: (options?: {
        tsconfig?: import("ts-jest").TsJestTransformerOptions["tsconfig"];
        astTransformers?: import("ts-jest").TsJestTransformerOptions["astTransformers"];
        babelConfig?: import("ts-jest").TsJestTransformerOptions["babelConfig"];
        diagnostics?: import("ts-jest").TsJestTransformerOptions["diagnostics"];
        testEnvironment?: import("./utils").JSDOMEnvironment;
    }) => {
        testEnvironment: import("./utils").JSDOMEnvironment;
        moduleFileExtensions: import("jest").Config["moduleFileExtensions"];
        snapshotSerializers: import("jest").Config["snapshotSerializers"];
    } & Required<Pick<{
        filter?: string | undefined;
        rootDir?: string | undefined;
        json?: boolean | undefined;
        automock?: boolean | undefined;
        bail?: number | boolean | undefined;
        cache?: boolean | undefined;
        cacheDirectory?: string | undefined;
        ci?: boolean | undefined;
        clearMocks?: boolean | undefined;
        changedFilesWithAncestor?: boolean | undefined;
        changedSince?: string | undefined;
        collectCoverage?: boolean | undefined;
        collectCoverageFrom?: string[] | undefined;
        coverageDirectory?: string | undefined;
        coveragePathIgnorePatterns?: string[] | undefined;
        coverageProvider?: "babel" | "v8" | undefined;
        coverageReporters?: ("json" | "text" | "clover" | "cobertura" | "html-spa" | "html" | "json-summary" | "lcov" | "lcovonly" | "none" | "teamcity" | "text-lcov" | "text-summary" | ["json" | "text" | "clover" | "cobertura" | "html-spa" | "html" | "json-summary" | "lcov" | "lcovonly" | "none" | "teamcity" | "text-lcov" | "text-summary", {
            [x: string]: unknown;
        }])[] | undefined;
        coverageThreshold?: {
            [path: string]: {
                branches?: number | undefined;
                functions?: number | undefined;
                lines?: number | undefined;
                statements?: number | undefined;
            };
            global: import("@sinclair/typebox").Static<import("@sinclair/typebox").TObject<{
                branches: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TNumber>;
                functions: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TNumber>;
                lines: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TNumber>;
                statements: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TNumber>;
            }>>;
        } | undefined;
        dependencyExtractor?: string | undefined;
        detectLeaks?: boolean | undefined;
        detectOpenHandles?: boolean | undefined;
        displayName?: string | {
            name: string;
            color: "black" | "red" | "green" | "yellow" | "blue" | "magenta" | "cyan" | "white" | "gray" | "grey" | "blackBright" | "redBright" | "greenBright" | "yellowBright" | "blueBright" | "magentaBright" | "cyanBright" | "whiteBright";
        } | undefined;
        expand?: boolean | undefined;
        extensionsToTreatAsEsm?: string[] | undefined;
        fakeTimers?: ({
            enableGlobally?: boolean | undefined;
        } & ({
            advanceTimers?: number | boolean | undefined;
            doNotFake?: ("Date" | "hrtime" | "nextTick" | "performance" | "queueMicrotask" | "requestAnimationFrame" | "cancelAnimationFrame" | "requestIdleCallback" | "cancelIdleCallback" | "setImmediate" | "clearImmediate" | "setInterval" | "clearInterval" | "setTimeout" | "clearTimeout")[] | undefined;
            now?: number | undefined;
            timerLimit?: number | undefined;
            legacyFakeTimers?: false | undefined;
        } | {
            legacyFakeTimers?: true | undefined;
        })) | undefined;
        findRelatedTests?: boolean | undefined;
        forceCoverageMatch?: string[] | undefined;
        forceExit?: boolean | undefined;
        globals?: {
            [x: string]: unknown;
        } | undefined;
        globalSetup?: string | null | undefined;
        globalTeardown?: string | null | undefined;
        haste?: {
            computeSha1?: boolean | undefined;
            defaultPlatform?: string | null | undefined;
            forceNodeFilesystemAPI?: boolean | undefined;
            enableSymlinks?: boolean | undefined;
            hasteImplModulePath?: string | undefined;
            platforms?: string[] | undefined;
            throwOnModuleCollision?: boolean | undefined;
            hasteMapModulePath?: string | undefined;
            retainAllFiles?: boolean | undefined;
        } | undefined;
        id?: string | undefined;
        injectGlobals?: boolean | undefined;
        reporters?: (string | [string, {
            [x: string]: unknown;
        }])[] | undefined;
        logHeapUsage?: boolean | undefined;
        lastCommit?: boolean | undefined;
        listTests?: boolean | undefined;
        maxConcurrency?: number | undefined;
        maxWorkers?: string | number | undefined;
        moduleDirectories?: string[] | undefined;
        moduleFileExtensions?: string[] | undefined;
        moduleNameMapper?: {
            [x: string]: string | string[];
        } | undefined;
        modulePathIgnorePatterns?: string[] | undefined;
        modulePaths?: string[] | undefined;
        noStackTrace?: boolean | undefined;
        notify?: boolean | undefined;
        notifyMode?: string | undefined;
        onlyChanged?: boolean | undefined;
        onlyFailures?: boolean | undefined;
        openHandlesTimeout?: number | undefined;
        outputFile?: string | undefined;
        passWithNoTests?: boolean | undefined;
        preset?: string | null | undefined;
        prettierPath?: string | null | undefined;
        projects?: (string | {
            [x: string]: unknown;
        })[] | undefined;
        randomize?: boolean | undefined;
        replname?: string | null | undefined;
        resetMocks?: boolean | undefined;
        resetModules?: boolean | undefined;
        resolver?: string | null | undefined;
        restoreMocks?: boolean | undefined;
        roots?: string[] | undefined;
        runner?: string | undefined;
        runTestsByPath?: boolean | undefined;
        runtime?: string | undefined;
        sandboxInjectedGlobals?: string[] | undefined;
        setupFiles?: string[] | undefined;
        setupFilesAfterEnv?: string[] | undefined;
        showSeed?: boolean | undefined;
        silent?: boolean | undefined;
        skipFilter?: boolean | undefined;
        skipNodeResolution?: boolean | undefined;
        slowTestThreshold?: number | undefined;
        snapshotResolver?: string | undefined;
        snapshotSerializers?: string[] | undefined;
        snapshotFormat?: {
            callToJSON?: boolean | undefined;
            compareKeys?: null | undefined;
            escapeRegex?: boolean | undefined;
            escapeString?: boolean | undefined;
            highlight?: boolean | undefined;
            indent?: number | undefined;
            maxDepth?: number | undefined;
            maxWidth?: number | undefined;
            min?: boolean | undefined;
            printBasicPrototype?: boolean | undefined;
            printFunctionName?: boolean | undefined;
            theme?: {
                comment?: string | undefined;
                content?: string | undefined;
                prop?: string | undefined;
                tag?: string | undefined;
                value?: string | undefined;
            } | undefined;
        } | undefined;
        errorOnDeprecated?: boolean | undefined;
        testEnvironment?: string | undefined;
        testEnvironmentOptions?: {
            [x: string]: unknown;
        } | undefined;
        testFailureExitCode?: number | undefined;
        testLocationInResults?: boolean | undefined;
        testMatch?: string | string[] | undefined;
        testNamePattern?: string | undefined;
        testPathIgnorePatterns?: string[] | undefined;
        testRegex?: string | string[] | undefined;
        testResultsProcessor?: string | undefined;
        testRunner?: string | undefined;
        testSequencer?: string | undefined;
        testTimeout?: number | undefined;
        transform?: {
            [x: string]: string | [string, unknown];
        } | undefined;
        transformIgnorePatterns?: string[] | undefined;
        watchPathIgnorePatterns?: string[] | undefined;
        unmockedModulePathPatterns?: string[] | undefined;
        updateSnapshot?: boolean | undefined;
        useStderr?: boolean | undefined;
        verbose?: boolean | undefined;
        waitForUnhandledRejections?: boolean | undefined;
        watch?: boolean | undefined;
        watchAll?: boolean | undefined;
        watchman?: boolean | undefined;
        watchPlugins?: (string | [string, unknown])[] | undefined;
        workerIdleMemoryLimit?: string | number | undefined;
        workerThreads?: boolean | undefined;
    }, "extensionsToTreatAsEsm" | "moduleNameMapper" | "transform" | "transformIgnorePatterns">>;
};
export = presetEntries;
